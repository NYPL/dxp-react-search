import * as React from "react";
// Next
import { GetStaticProps } from "next";
import { ParsedUrlQuery } from "querystring";
// Apollo
import withApollo from "../apollo/withApollo";
import { initializeApollo } from "../apollo/withApollo/apollo";
import { DECOUPLED_ROUTER_QUERY } from "./../hooks/useDecoupledRouter";
// Section front
import SectionFrontPage, {
  //sectionFrontsPaths,
  sectionFrontsSlugs,
  SECTION_FRONT_QUERY,
} from "../components/section-fronts/SectionFrontPage/SectionFrontPage";

type CatchAllRoutesPageProps = {
  slug: string;
  uuid: string;
  isPreview: boolean;
  revisionId: string;
  status: "SUCCESS" | "ERROR" | "NOT_FOUND" | "MAINTENANCE_MODE";
};

interface CatchAllRoutesParams extends ParsedUrlQuery {
  slug: string;
}

function CatchAllRoutesPage({
  slug,
  uuid,
  isPreview,
  revisionId,
}: CatchAllRoutesPageProps) {
  // Determine which page template to use by current slug.
  if (sectionFrontsSlugs.includes(`/${slug}`)) {
    return (
      <SectionFrontPage
        uuid={uuid}
        isPreview={isPreview}
        revisionId={revisionId}
      />
    );
  }

  return null;
}

export async function getStaticPaths() {
  return {
    // @TODO the paths shouldn't be hardcoded, b/c if a node is unpublished but included here,
    // the build will break.

    // This tells nextjs not generated the page at build time, but ssr for the first request.
    // Follow up requests will be serving static content.
    paths: [],
    fallback: "blocking",
  };
}

export const getStaticProps: GetStaticProps<
  CatchAllRoutesPageProps,
  CatchAllRoutesParams
> = async (context) => {
  const apolloClient = initializeApollo();

  const slug = context.params?.slug[0];
  const { previewData }: any = context;

  let uuid;
  let revisionId = null;
  let status;

  // Preview mode.
  const isPreview = context.preview ? context.preview : false;
  // Set the uuid for preview mode.
  if (isPreview) {
    uuid = previewData.uuid;
    revisionId = previewData.revisionId;
  } else {
    // Get decoupled router data.
    const decoupledRouterData = await apolloClient.query({
      query: DECOUPLED_ROUTER_QUERY,
      variables: {
        path: slug,
      },
    });

    uuid = await decoupledRouterData?.data?.decoupledRouter?.uuid;
    status = await decoupledRouterData?.data?.decoupledRouter?.status;

    // CMS is in maintenance mode, so throw an error to prevent revalidation.
    // This will allow the old page to continue to render, even if CMS is offline.
    if (status === "MAINTENANCE_MODE") {
      throw new Error("CMS is in maintenance mode. Do not revalidate.");
    }

    // Error
    // if (status === "ERROR") {
    //   throw new Error("CMS returned an error. Do not revalidate.");
    // }

    // Route is not found in CMS, so set 404 status.
    if (status === "NOT_FOUND") {
      return {
        notFound: true,
      };
    }

    // Handle the redirect.
    // const redirect = await decoupledRouterData?.data?.decoupledRouter?.redirect;
    // if (status === "SUCCESS" && redirect) {
    // }

    // Redirect logic
    // @TODO this doesn't work, @SEE https://github.com/vercel/next.js/discussions/11346
    // const redirect = await decoupledRouterData?.data?.decoupledRouter?.redirect;
    // // Handle the redirect.
    // if (redirect) {
    //   return {
    //     redirect: {
    //       statusCode: 301,
    //       destination: redirect.to,
    //     },
    //   };
    // }
  }

  // @TODO What is the point of this?
  try {
    await apolloClient.query({
      query: SECTION_FRONT_QUERY,
      variables: {
        id: uuid,
        ...(isPreview && {
          preview: true,
          revisionId: revisionId,
        }),
      },
    });
  } catch (error) {
    console.error(`getStaticProps: ${error}`);
  }

  return {
    props: {
      slug: slug,
      uuid: uuid,
      status: status,
      isPreview: isPreview,
      ...(revisionId && {
        revisionId: revisionId,
      }),
      initialApolloState: apolloClient.cache.extract(),
    },
    // Set revalidate to false, so page is only regenerated by revalidate api.
    // revalidate: false,
    // Set revalidate to 1 min
    revalidate: 60,
  };
};

export default withApollo(CatchAllRoutesPage as any);
